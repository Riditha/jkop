
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2019 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is RS256:

depend "nuget:BouncyCastle.NetCoreSdk@1.9.0.1"

func generate(data as buffer, key as string) override as buffer
{
	assert data
	assert String.isNotEmpty(key)
	var v as buffer
	lang "cs" {{{
		System.IO.StringReader tr = new System.IO.StringReader(key);
		Org.BouncyCastle.OpenSsl.PemReader pr = new Org.BouncyCastle.OpenSsl.PemReader(tr);
		Org.BouncyCastle.Crypto.Parameters.RsaPrivateCrtKeyParameters rsaKeyParameters = (Org.BouncyCastle.Crypto.Parameters.RsaPrivateCrtKeyParameters)pr.ReadObject();
		pr.Reader.Close();
		tr.Close();
		System.Security.Cryptography.RSAParameters rsaParams = new System.Security.Cryptography.RSAParameters();
		rsaParams.Modulus = rsaKeyParameters.Modulus.ToByteArrayUnsigned();
		rsaParams.Exponent = rsaKeyParameters.PublicExponent.ToByteArrayUnsigned();
		rsaParams.D = rsaKeyParameters.Exponent.ToByteArrayUnsigned();
		rsaParams.P = rsaKeyParameters.P.ToByteArrayUnsigned();
		rsaParams.Q = rsaKeyParameters.Q.ToByteArrayUnsigned();
		rsaParams.DP = rsaKeyParameters.DP.ToByteArrayUnsigned();
		rsaParams.DQ = rsaKeyParameters.DQ.ToByteArrayUnsigned();
		rsaParams.InverseQ = rsaKeyParameters.QInv.ToByteArrayUnsigned();
		System.Security.Cryptography.RSA rsa = System.Security.Cryptography.RSA.Create();
		rsa.ImportParameters(rsaParams);
		System.Security.Cryptography.HashAlgorithm alg = System.Security.Cryptography.SHA256.Create();
		byte[] hash = alg.ComputeHash(data);
		v = rsa.SignHash(hash, System.Security.Cryptography.HashAlgorithmName.SHA256, System.Security.Cryptography.RSASignaturePadding.Pkcs1);
	}}}
	return v
}

func validate(data as buffer, signature as buffer, key as string) override as bool
{
	assert data
	assert String.isNotEmpty(key)
	var v as bool
	lang "cs" {{{
		System.IO.StringReader tr = new System.IO.StringReader(key);
		Org.BouncyCastle.OpenSsl.PemReader pr = new Org.BouncyCastle.OpenSsl.PemReader(tr);
		Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters rsaKeyParameters = (Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters)pr.ReadObject();
		pr.Reader.Close();
		tr.Close();
		System.Security.Cryptography.RSAParameters rsaParams = new System.Security.Cryptography.RSAParameters();
		rsaParams.Modulus = rsaKeyParameters.Modulus.ToByteArrayUnsigned();
		rsaParams.Exponent = rsaKeyParameters.Exponent.ToByteArrayUnsigned();
		System.Security.Cryptography.HashAlgorithm alg = System.Security.Cryptography.SHA256.Create();
		byte[] hash = alg.ComputeHash(data);
		using(System.Security.Cryptography.RSACryptoServiceProvider rsa = new System.Security.Cryptography.RSACryptoServiceProvider()) {
			rsa.ImportParameters(rsaParams);
			System.Security.Cryptography.RSAPKCS1SignatureDeformatter fmt = new System.Security.Cryptography.RSAPKCS1SignatureDeformatter(rsa);
			fmt.SetHashAlgorithm("SHA256");
			v = fmt.VerifySignature(hash, signature);
		}
	}}}
	return v
}

func jwkToPem(dm as DynamicMap) override as string
{
	var str as string
	var n = Base64Decoder.fromUrlSafeFormat(dm.getString("n"))
	var e = Base64Decoder.fromUrlSafeFormat(dm.getString("e"))
	lang "cs" {{{
		System.Security.Cryptography.RSAParameters rsaParams = new System.Security.Cryptography.RSAParameters();
		rsaParams.Modulus = System.Convert.FromBase64String(n);
		rsaParams.Exponent = System.Convert.FromBase64String(e);
		using(System.Security.Cryptography.RSACryptoServiceProvider rsa = new System.Security.Cryptography.RSACryptoServiceProvider()) {
			rsa.ImportParameters(rsaParams);
			str = ExportPublicKey(rsa);
		}
	}}}
	return str
}

lang "cs" {{{
	private static System.String ExportPublicKey(System.Security.Cryptography.RSACryptoServiceProvider csp)
	{
		var parameters = csp.ExportParameters(false);
		System.IO.TextWriter outputStream = new System.IO.StringWriter();
		using (var stream = new System.IO.MemoryStream())
		{
			var writer = new System.IO.BinaryWriter(stream);
			writer.Write((byte)0x30);
			using (var innerStream = new System.IO.MemoryStream())
			{
				var innerWriter = new System.IO.BinaryWriter(innerStream);
				innerWriter.Write((byte)0x30);
				EncodeLength(innerWriter, 13);
				innerWriter.Write((byte)0x06);
				var rsaEncryptionOid = new byte[] { 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01 };
				EncodeLength(innerWriter, rsaEncryptionOid.Length);
				innerWriter.Write(rsaEncryptionOid);
				innerWriter.Write((byte)0x05);
				EncodeLength(innerWriter, 0);
				innerWriter.Write((byte)0x03);
				using (var bitStringStream = new System.IO.MemoryStream())
				{
					var bitStringWriter = new System.IO.BinaryWriter(bitStringStream);
					bitStringWriter.Write((byte)0x00);
					bitStringWriter.Write((byte)0x30);
					using (var paramsStream = new System.IO.MemoryStream())
					{
						var paramsWriter = new System.IO.BinaryWriter(paramsStream);
						EncodeIntegerBigEndian(paramsWriter, parameters.Modulus);
						EncodeIntegerBigEndian(paramsWriter, parameters.Exponent);
						var paramsLength = (int)paramsStream.Length;
						EncodeLength(bitStringWriter, paramsLength);
						bitStringWriter.Write(paramsStream.GetBuffer(), 0, paramsLength);
					}
					var bitStringLength = (int)bitStringStream.Length;
					EncodeLength(innerWriter, bitStringLength);
					innerWriter.Write(bitStringStream.GetBuffer(), 0, bitStringLength);
				}
				var length = (int)innerStream.Length;
				EncodeLength(writer, length);
				writer.Write(innerStream.GetBuffer(), 0, length);
			}

			var base64 = System.Convert.ToBase64String(stream.GetBuffer(), 0, (int)stream.Length).ToCharArray();
			outputStream.WriteLine("-----BEGIN PUBLIC KEY-----");
			for (var i = 0; i < base64.Length; i += 64)
			{
				outputStream.WriteLine(base64, i, System.Math.Min(64, base64.Length - i));
			}
			outputStream.WriteLine("-----END PUBLIC KEY-----");
			return outputStream.ToString();
		}
	}

	private static void EncodeLength(System.IO.BinaryWriter stream, int length)
	{
		if (length < 0) throw new System.ArgumentOutOfRangeException("length", "Length must be non-negative");
		if (length < 0x80)
		{
			stream.write(length as buffer)
		}
		else
		{
			var temp = length
			var bytesRequired = 0
			while temp > 0 {
				temp >>= 8
				bytesRequired++
			}
			stream.write(bytesRequired | 0x80 as buffer)
			for (var i = bytesRequired - 1; i >= 0; i--)
			{
				stream.Write((byte)(length >> (8 * i) & 0xff));
			}
		}
	}

	private static void EncodeIntegerBigEndian(System.IO.BinaryWriter stream, byte[] value, bool forceUnsigned = true)
	{
		stream.Write((byte)0x02);
		var prefixZeros = 0;
		for (var i = 0; i < value.Length; i++)
		{
			if (value[i] != 0) break;
			prefixZeros++;
		}
		if (value.Length - prefixZeros == 0)
		{
			EncodeLength(stream, 1);
			stream.Write((byte)0);
		}
		else
		{
			if (forceUnsigned && value[prefixZeros] > 0x7f)
			{
				EncodeLength(stream, value.Length - prefixZeros + 1);
				stream.Write((byte)0);
			}
			else
			{
				EncodeLength(stream, value.Length - prefixZeros);
			}
			for (var i = prefixZeros; i < value.Length; i++)
			{
				stream.Write(value[i]);
			}
		}
	}
}}}
